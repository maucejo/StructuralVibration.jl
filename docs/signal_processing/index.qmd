---
title: Digital Signal Processing
format:
  html:
    toc: true
    number-sections: true
engine: julia
execute:
  freeze: auto
  cache: true
---

```{julia}
#| echo: false
#| output: false
using StructuralVibration, FFTW, ShareAdd
import DSP
@usingany CairoMakie
```

`StructuralVibration.jl` provides a set of functions complementing the `DSP.jl` to simulate the signal processing pipelines used in structural dynamics applications, such as modal analysis, system identification, and vibration data processing. They can for instance be used to simulate or to process experimental data, which can then be used to validate new algorithms (direct or inverse methods) and to benchmark with existing ones.

## Window functions

The `DSP.jl` package provides a set of window functions that can be used to reduce spectral leakage in the frequency domain. The `StructuralVibration.jl` package exports the window functions defined in `DSP.jl` and provides additional ones for the sake of completeness.

### Windows from DSP.jl

#### Rectangular window

The rectangular window is the simplest window function, which does not modify the signal. It is defined as:
$$
w[n] = 1,
$$
for $n \in [0, N-1]$, where $N$ is the length of the window.

The rectangular window is generally not recommended for spectral analysis, as it introduces significant spectral leakage. It is mainly used for testing purposes or when no windowing is required (such as impact testing for sufficiently long acquisition duration).

##### API

::: {.api}
**rect**

---
```{julia}
#| echo: false
@doc rect
```
:::

##### Example

```{julia}
#| output: false
rectwin = rect(1024)
```

```{julia}
#| echo: false
fig_rect = Figure()
ax_rect = Axis(fig_rect[1, 1], title = "Rectangular window")
lines!(ax_rect, 0:1023, rectwin)
xlims!(ax_rect, 0, 1023)

display(fig_rect);
```

#### Hann(ing) window

The Hann window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = \frac{1}{2} \left[1 - \cos\left(\frac{2\pi n}{N-1}\right)\right],
$$
where $N$ is the length of the window and $n \in [0, N-1]$.

##### API

::: {.api}
**hann**

---
```{julia}
#| echo: false
@doc hanning
```
:::

##### Example

```{julia}
#|output: false
hannwin = hanning(1024)
```

```{julia}
#| echo: false
fig_hann = Figure()
ax_hann = Axis(fig_hann[1, 1], title = "Hann(ing) window")
lines!(ax_hann, 0:1023, hannwin)
xlims!(ax_hann, 0, 1023)

display(fig_hann);
```

#### Hamming window

The Hamming window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = 0.54 - 0.46 \cos\left(\frac{2\pi n}{N-1}\right),
$$
where $N$ is the length of the window and $n \in [0, N-1]$.

##### API

::: {.api}
**hamming**

---
```{julia}
#| echo: false
@doc hamming
```
:::

##### Example

```{julia}
#|output: false
hammwin = hamming(1024)
```

```{julia}
#| echo: false
fig_hamm = Figure()
ax_hamm = Axis(fig_hamm[1, 1], title = "Hamming window")
lines!(ax_hamm, 0:1023, hammwin)
xlims!(ax_hamm, 0, 1023)

display(fig_hamm);
```

#### Tukey window

The Tukey window (also known as the cosine-tapered window) is defined by a tapering parameter $\alpha \in [0,1]$, which controls the proportion of the window that is tapered. The window is defined as:

$$
\begin{align*}
& w[n] = \frac{1}{2} \left[1 - \cos\left(\frac{2\pi n}{\alpha(N-1)}\right)\right], & 0 \leq n < \frac{\alpha(N-1)}{2} \\
& w[n] = 1,  & \frac{\alpha(N-1)}{2} \leq n \leq \frac{(N-1)}{2} \\
& w[N-1 - n] = w[n], & 0 \leq n \leq \frac{\alpha(N-1)}{2} \\
\end{align*}
$$

When $\alpha = 0$, the Tukey window becomes a rectangular window, and when $\alpha = 1$, it becomes equivalent to a Hann window.

##### API

::: {.api}
**tukey**

---
```{julia}
#| echo: false
@doc tukey
```
:::

##### Example

```{julia}
#|output: false
tukeywin = tukey(1024, 0.5)
```

```{julia}
#| echo: false
fig_tukey = Figure()
ax_tukey = Axis(fig_tukey[1, 1], title = "Tukey window")
lines!(ax_tukey, 0:1023, tukeywin)
xlims!(ax_tukey, 0, 1023)

display(fig_tukey);
```

#### Cosine window

The cosine window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = \cos\left(\frac{\pi n}{N-1} - \frac{\pi}{2}\right),
$$
where $N$ is the length of the window and $n \in [0, N-1]$.

##### API

::: {.api}
**cosine**

---
```{julia}
#| echo: false
@doc cosine
```
:::

##### Example

```{julia}
#|output: false
coswin = cosine(1024)
```

```{julia}
#| echo: false
fig_cos = Figure()
ax_cos = Axis(fig_cos[1, 1], title = "Cosine window")
lines!(ax_cos, 0:1023, coswin)
xlims!(ax_cos, 0, 1023)

display(fig_cos);
```

#### Lanczos window

The Lanczos window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = \text{sinc}\left(\frac{2n}{N-1} - 1\right),
$$
where $N$ is the length of the window and $n \in [0, N-1]$.

##### API

::: {.api}
**lanczos**

---
```{julia}
#| echo: false
@doc lanczos
```
:::

##### Example

```{julia}
#|output: false
lanczoswin = lanczos(1024)
```

```{julia}
#| echo: false
fig_lanczos = Figure()
ax_lanczos = Axis(fig_lanczos[1, 1], title = "Lanczos window")
lines!(ax_lanczos, 0:1023, lanczoswin)
xlims!(ax_lanczos, 0, 1023)

display(fig_lanczos);
```

#### Triangular window

The triangular window is a simple window function that tapers the signal at both ends. It is defined as:
$$
w[n] = 1 - \frac{|2n - (N-1)|}{L},
$$
where $L = N/N+1$ is $N$ is even/odd and $n \in [0, N-1]$.

##### API

::: {.api}
**triang**

---
```{julia}
#| echo: false
@doc triang
```
:::

```{julia}
#|output: false
triangwin = triang(1024)
```

```{julia}
#| echo: false
fig_triang = Figure()
ax_triang = Axis(fig_triang[1, 1], title = "Triangular window")
lines!(ax_triang, 0:1023, triangwin)
xlims!(ax_triang, 0, 1023)

display(fig_triang);
```

#### Bartlett window

The Bartlett window is a triangular window that tapers the signal at both ends. It is defined as:
$$
w[n] = \left(1 - \frac{|n - L|}{L}\right),
$$
where $L = \frac{N-1}{2}$ and $n \in [0, N-1]$.

##### API

::: {.api}
**bartlett**

---
```{julia}
#| echo: false
@doc bartlett
```
:::

##### Example

```{julia}
#|output: false
bartlettwin = bartlett(1024)
```

```{julia}
#| echo: false
fig_bartlett = Figure()
ax_bartlett = Axis(fig_bartlett[1, 1], title = "Bartlett window")
lines!(ax_bartlett, 0:1023, bartlettwin)
xlims!(ax_bartlett, 0, 1023)

display(fig_bartlett);
```

#### Bartlett-Hann window

The Bartlett-Hann window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = 0.62 - 0.48 \left|\frac{n}{N-1} - 0.5\right| + 0.38 \cos\left(2\pi\left[\frac{n}{N-1} - 0.5\right]\right),
$$
where $n \in [0, N-1]$.

##### API

::: {.api}
**bartlett_hann**

---
```{julia}
#| echo: false
@doc bartlett_hann
```
:::

##### Example

```{julia}
#|output: false
barthannwin = bartlett_hann(1024)
```

```{julia}
#| echo: false
fig_bartlett_hann = Figure()
ax_bartlett_hann = Axis(fig_bartlett_hann[1, 1], title = "Bartlett-Hann window")
lines!(ax_bartlett_hann, 0:1023, barthannwin)
xlims!(ax_bartlett_hann, 0, 1023)

display(fig_bartlett_hann);
```

#### Gaussian window

The Gaussian window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = \text{exp}\left(-\frac{(n - \mu)^2}{2\sigma^2}\right),
$$
where $\mu = \frac{N-1}{2}$ is the center of the window, $\sigma$ is the standard deviation, and $n \in [0, N-1]$.

##### API

::: {.api}
**gaussian**

---
```{julia}
#| echo: false
@doc gaussian
```
:::

##### Example

```{julia}
#|output: false
gaussianwin = gaussian(1024, 0.2)
```

```{julia}
#| echo: false
fig_gaussian = Figure()
ax_gaussian = Axis(fig_gaussian[1, 1], title = "Gaussian window")
lines!(ax_gaussian, 0:1023, gaussianwin)
xlims!(ax_gaussian, 0, 1023)

display(fig_gaussian);
```

#### Blackman window

The Blackman window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = 0.42 - 0.5 \cos\left(\frac{2\pi n}{N-1}\right) + 0.08 \cos\left(\frac{4\pi n}{N-1}\right),
$$
where $n \in [0, N-1]$.

##### API

::: {.api}
**blackman**

---
```{julia}
#| echo: false
@doc blackman
```
:::

##### Example

```{julia}
#|output: false
blackmanwin = blackman(1024)
```

```{julia}
#| echo: false
fig_blackman = Figure()
ax_blackman = Axis(fig_blackman[1, 1], title = "Blackman window")
lines!(ax_blackman, 0:1023, blackmanwin)
xlims!(ax_blackman, 0, 1023)

display(fig_blackman);
```

#### Kaiser window

The Kaiser window is a raised cosine window that tapers the signal at both ends. It is defined as:
$$
w[n] = I_0\left(\pi\alpha \sqrt{1 - \left(\frac{2n}{N-1} - 1\right)^2}\right) / I_0(\pi\alpha),
$$
where $I_0$ is the modified Bessel function of the first kind, $\beta$ is a parameter that controls the shape of the window, and $n \in [0, N-1]$.

##### API

::: {.api}
**kaiser**

---
```{julia}
#| echo: false
@doc kaiser
```
:::

##### Example

```{julia}
#|output: false
kaiserwin = kaiser(1024, 0.5)
```

```{julia}
#| echo: false
fig_kaiser = Figure()
ax_kaiser = Axis(fig_kaiser[1, 1], title = "Kaiser window")
lines!(ax_kaiser, 0:1023, kaiserwin)
xlims!(ax_kaiser, 0, 1023)

display(fig_kaiser);
```

#### DPSS window

The DPSS (Discrete Prolate Spheroidal Sequences) window maximizes the energy concentration in the main lobe. It has no closed form expression and depends on two parameters: the length of the window $N$ and the time-half-bandwidth product $Nw$ which controls the energy concentration in the main lobe.

##### API

::: {.api}
**dpss**

---
```{julia}
#| echo: false
@doc dpss
```
:::

##### Example

```{julia}
#| output: false
dpsswin = dpss(1024, 4, 1)
```

```{julia}
#| echo: false
fig_dpss = Figure()
ax_dpss = Axis(fig_dpss[1, 1], title = "DPSS window")
lines!(ax_dpss, 0:1023, dpsswin[:])
xlims!(ax_dpss, 0, 1023)

display(fig_dpss);
```

### Additional window functions

#### Exponential window

An exponential window is a window function that tapers the signal exponentially. It is defined as:
$$
w[n] = \text{exp}\left(-\frac{\tau n}{N-1}\right),
$$
where $n \in [0, N-1]$, $\tau = -\log(p)$ is the time constant, and $p$ is the percentage of the original value by the end of the acquisition block.

##### API

::: {.api}
**exponential**

---
```{julia}
#| echo: false
@doc exponential
```
:::

##### Example

```{julia}
#| output: false
exponentialwin = exponential(1024, 0.1)
```

```{julia}
#| echo: false
fig_exponential = Figure()
ax_exponential = Axis(fig_exponential[1, 1], title = "Exponential window")
lines!(ax_exponential, 0:1023, exponentialwin)
xlims!(ax_exponential, 0, 1023)

display(fig_exponential);
```

#### Force window

The force window is a window function particularly useful in impact testing, where the input signal is a short impulse. The force window is the product of two distinct windows. The first one, denoted $w_1[n]$, is a rectangular window whose end is tapered by a cosine function, namely:
$$
w_1[n] = \begin{cases}
1, & 0 \leq n < L \\
\cos\left(\frac{\pi}{2}\left(\frac{n - L}{M - L}\right)\right), & L \leq n < M \\
0, & M \leq n < N
\end{cases},
$$
where $n \in [0, N-1]$, $L = pN$ is the width of the window, $M = N\text{min}(1, L/N + 0.04)$ is the index of the end of the cosine tapering part of the window, and $p$ is the percentage of the length of the data acquisition block.

The second one, denoted $w_2[n]$, is the exponentital window defined above. Hence, the force window is defined as:
$$
w[n] = w_1[n] \cdot w_2[n],
$$
where $w_2[n] = \text{exp}\left(-\frac{\tau n}{N-1}\right)$, with $\tau = -\log(p)$.

##### API

::: {.api}
**force**

---
```{julia}
#| echo: false
@doc force
```
:::

##### Example

```{julia}
#| output: false
forcewin = force(1024, 0.2, 1.)
force_expwin = force(1024, 0.2, 0.01)
```

```{julia}
#| echo: false
fig_force = Figure()
ax_force = Axis(fig_force[1, 1], title = "Force window")
lines!(ax_force, 0:1023, forcewin, label = "exponential_end = 1")
lines!(ax_force, 0:1023, force_expwin, label = "exponential_end = 0.01")
axislegend(ax_force, position = :rt, backgroundcolor = (:white, 0.5),)
xlims!(ax_force, 0, 1023)

display(fig_force);
```

#### Flat-top window

The flat-top window is a window function that window is a partially negative-valued window that has minimal scalloping loss in the frequency domain. It is defined as:
$$
w[n] = a_0 - a_1\cos\left(\frac{2\pi n}{N-1}\right) + a_2\cos\left(\frac{4\pi n}{N-1}\right) - a_3\cos\left(\frac{6\pi n}{N-1}\right) + a_4\cos\left(\frac{8\pi n}{N-1}\right),
$$
where $n \in [0, N-1]$ and $a_0 = 0.21557895$, $a_1 = 0.41663158$, $a_2 = 0.277263158$, $a_3 = 0.083578947$, and $a_4 = 0.006947368$.

##### API

::: {.api}
**flattop**

---
```{julia}
#| echo: false
@doc flattop
```
:::

##### Example
```{julia}
#| output: false
flattopwin = flattop(1024)
```

```{julia}
#| echo: false
fig_flattop = Figure()
ax_flattop = Axis(fig_flattop[1, 1], title = "Flat-top window")
lines!(ax_flattop, 0:1023, flattopwin)
xlims!(ax_flattop, 0, 1023)

display(fig_flattop);
```

#### Nuttall window

The Nutall window is a window function that returns a Nuttall four-term symmetric Blackman-Harris window. It produces slightly lower sidelobes than Blackman-Harris window. It is defined as:
$$
w[n] = a_0 - a_1\cos\left(\frac{2\pi n}{N-1}\right) + a_2\cos\left(\frac{4\pi n}{N-1}\right) - a_3\cos\left(\frac{6\pi n}{N-1}\right),
$$
where $n \in [0, N-1]$ and $a_0 = 0.355768$, $a_1 = 0.487396$, $a_2 = 0.144232$, and $a_3 = 0.012604$.

##### API

::: {.api}
**nuttall**

---
```{julia}
#| echo: false
@doc nuttall
```
:::

##### Example

```{julia}
#| output: false
nuttallwin = nuttall(1024)
```

```{julia}
#| echo: false
fig_nuttall = Figure()
ax_nuttall = Axis(fig_nuttall[1, 1], title = "Nuttall window")
lines!(ax_nuttall, 0:1023, nuttallwin)
xlims!(ax_nuttall, 0, 1023)

display(fig_nuttall);
```

#### Blackman-Nuttall window

The Blackman-Nuttall window is a window function that is a modified version of the exact Blackman window. It is defined as:
$$
w[n] = a_0 - a_1\cos\left(\frac{2\pi n}{N-1}\right) + a_2\cos\left(\frac{4\pi n}{N-1}\right) - a_3\cos\left(\frac{6\pi n}{N-1}\right),
$$
where $n \in [0, N-1]$ and $a_0 = 0.3635819$, $a_1 = 0.4891775$, $a_2 = 0.1365995$, and $a_3 = 0.0106411$.

##### API

::: {.api}
**blackman_nuttall**

---
```{julia}
#| echo: false
@doc blackman_nuttall
```
:::

##### Example
```{julia}
#| output: false
blackman_nuttallwin = blackman_nuttall(1024)
```

```{julia}
#| echo: false
fig_blackman_nuttall = Figure()
ax_blackman_nuttall = Axis(fig_blackman_nuttall[1, 1], title = "Blackman-Nuttall window")
lines!(ax_blackman_nuttall, 0:1023, blackman_nuttallwin)
xlims!(ax_blackman_nuttall, 0, 1023)

display(fig_blackman_nuttall);
```

#### Blackman-Harris window

The Blackman-Harris window is a window function that is another modified version of the exact Blackman window. It is defined as:
$$
w[n] = a_0 - a_1\cos\left(\frac{2\pi n}{N-1}\right) + a_2\cos\left(\frac{4\pi n}{N-1}\right) - a_3\cos\left(\frac{6\pi n}{N-1}\right),
$$
where $n \in [0, N-1]$ and $a_0 = 0.35875$, $a_1 = 0.48829$, $a_2 = 0.14128$, and $a_3 = 0.01168$.

##### API

::: {.api}
**blackman_harris**

---
```{julia}
#| echo: false
@doc blackman_harris
```
:::

##### Example
```{julia}
#| output: false
blackman_harriswin = blackman_harris(1024)
```

```{julia}
#| echo: false
fig_blackman_harris = Figure()
ax_blackman_harris = Axis(fig_blackman_harris[1, 1], title = "Blackman-Harris window")
lines!(ax_blackman_harris, 0:1023, blackman_harriswin)
xlims!(ax_blackman_harris, 0, 1023)

display(fig_blackman_harris);
```

#### Parzen window

The parzen window is a window function is defined as:
$$
w[n] = \begin{cases}
1 - 6\left(\frac{2|n - M|}{N}\right)^2\left(1 - \frac{2|n - M|}{N}\right) &  0 \leq |n - M| \leq \frac{M}{2}\\
2\left(1 - \frac{2|n - M|}{N}\right)^3 & \frac{M}{2} < |n - M| \leq M\\
\end{cases}
$$
where $M = \frac{N - 1}{2}$ and $n \in [0, N-1]$.

##### API

::: {.api}
**parzen**

---
```{julia}
#| echo: false
@doc parzen
```
:::

##### Example
```{julia}
#| output: false
parzenwin = parzen(1024)
```

```{julia}
#| echo: false
fig_parzen = Figure()
ax_parzen = Axis(fig_parzen[1, 1], title = "Parzen window")
lines!(ax_parzen, 0:1023, parzenwin)
xlims!(ax_parzen, 0, 1023)

display(fig_parzen);
```

#### Planck-taper window

The Planck-taper window is a window function that is defined as:
$$
w[n] = \begin{cases}
0, & n = 0 \\
(1 + \text{exp}\left(\frac{\epsilon N}{n} - \frac{\epsilon N}{\epsilon N - n}\right)), & 1 \leq n < \epsilon N \\
1, & \epsilon N \leq n < N/2 \\
w[N - n], & 0 \leq n < N/2 \\
\end{cases},
$$
where $n \in [0, N-1]$ and $\epsilon$ is a parameter, defined in [0, 1] that controls the amount of tapering

##### API

::: {.api}
**planck**

---
```{julia}
#| echo: false
@doc planck
```
:::

##### Example
```{julia}
#| output: false
planckwin = planck(1024, 0.1)
```

```{julia}
#| echo: false
fig_planck = Figure()
ax_planck = Axis(fig_planck[1, 1], title = "Planck-taper window")
lines!(ax_planck, 0:1023, planckwin)
xlims!(ax_planck, 0, 1023)

display(fig_planck);
```

### Choice of a window function

The choice of a window function depends on the application and the desired properties of the window[^1] [^2] [^3]. Here are some general guidelines for the main windows used in structural dynamics applications:

[^1]: M+P International, "M+P Analyzer. User Manual Revision 5.1". 2017.
[^2]: Polytec, "Polytec Scanning Vibrometer, Theory Manual". 2019.
[^3]: P. Avitabile, "Modal Testing: A practioner's guide".  John Wiley & Sons. 2018.

- **Rectangular window**: This window is suitable for signals which are periodic in the acquisition window or for non-periodic signals which tend to 0 whithin the time window (such as impact testing).

- **Hann window**: This window is suitable for noisy signals. It is generally used with random signal due to its moderate impact on the frequency resolution and amplitude accuracy of porcessed signals.

- **Hamming window**: This window is used in case of noisy measured signals as the Hann windows. However, contrary to the Hann window, the Hamming window doesn't reach zero at its both ends.

- **Tukey window**: This window is generally used to analyze transient data due to its shape, since it limits the alteration of the amplitude of transient signals.

- **Blackman-Harris window**: This window is suitable for periodic measurement signals.

- **Flat-top window**: This window is suitable for a calibration purposes (good reproduction of the amplitude height) and for measurements with sine excitation. However, it is not suitable for very noisy measurement signals.

- **Force window**: This window is an effective mechanism for reducing noise on the input channel when the input signal is impulsive.

- **Exponential window**: This window is suitable for transient signals that decay to zero, such as acceleration signal in impact testing.

## Anti-aliasing filter

Anti-aliasing filtering is a technique used to prevent aliasing, which occurs when high-frequency components of a signal are misrepresented as lower-frequency components due to insufficient sampling. The `anti_alias` function in `StructuralVibration.jl` applies a high-order low-pass filter to the signal whose cut-off frequency is the Nyquist frequency. The proposed filter is designed using the Remez exchange algorithm implemented in `DSP.jl`.

### API

::: {.api}
**anti_alias**

---
```{julia}
#| echo: false
@doc anti_alias
```
:::

### Example
```{julia}
#| output: false
# Time parameters
Δt = 1e-4
t = 0.:Δt:10.
fs = 1/Δt

# Signal
nt = length(t)
y = randn(nt)

# filtered signal
yf = anti_alias(y, 2500., fs = fs)
```

```{julia}
#| echo: false
freq = rfftfreq(nt, fs)
fig_a = Figure()
ax_a1 = Axis(fig_a[1, 1], xlabel = "Time (s)", ylabel = "Signal", title = "Original data")
ax_a2 = Axis(fig_a[2, 1], xlabel = "Frequency (Hz)", ylabel = "Amplitude (dB)")
lines!(ax_a1, t, y, label = "Original signal")
xlims!(ax_a1, 0., t[end])

lines!(ax_a2, freq, 10log10.(abs.(rfft(y))), label = "FFT")
xlims!(ax_a2, 0., freq[end])

display(fig_a);

fig_b = Figure()
ax_b1 = Axis(fig_b[1, 1], xlabel = "Time (s)", ylabel = "Signal", title = "Filtered data")
ax_b2 = Axis(fig_b[2, 1], xlabel = "Frequency (Hz)", ylabel = "Amplitude (dB)")
lines!(ax_b1, t, yf, label = "Filtered signal")
xlims!(ax_b1, 0., t[end])

lines!(ax_b2, freq, 10log10.(abs.(rfft(yf))), label = "FFT")
xlims!(ax_b2, 0., freq[end])

display(fig_b);
```

## Function estimation

Several functions can be estimated from the time domain data when operating in the frequency domain.

The `StructuralVibration.jl` package provides functions to estimate some of the most common functions used in structural dynamics applications. All the functions listed below are based on the Welch's method and include the option to use a window function (+ its correction factor) to reduce spectral leakage and signal overlapping to reduce the variance of the estimated function or to compensate for the windowing effect.

### Acquisition parameters

When acquiring data, the user has to define the sample rate $f_s$ and the block size $b_s$. The sample rate is the number of samples per second (in Hz), and the block size is the number of samples in each block. The block size is usually a power of 2, which allows for efficient computation of the FFT. From these two parameters, it is posiible to define the following parameters:

- **Sampling period**: The sampling period (in s) is the time between two consecutive samples. It is defined as:
$$
\Delta t = \frac{1}{f_s}.
$$

- **Acquisition duration**: The acquisition duration (in s) is the time taken to acquire a block of data. It is defined as:
$$
T = b_s \Delta t = \frac{b_s}{f_s}.
$$

- **Frequency resolution**: The frequency resolution (in Hz) is the smallest frequency difference that can be resolved in the frequency domain. It is defined as:
$$
\Delta f = \frac{f_s}{b_s}.
$$

- **Maximum frequency**: The maximum frequency (in Hz) is the highest frequency that can be resolved in the frequency domain and satisfying the Nyquist theorem. It is defined as:
$$
f_{max} = \frac{f_s}{2.56}.
$$

All these parameters are implemented in the `FFTParameters` struct, which is used in the functions to estimate the functions listed below.

::: {.api}
**FFTParameters**

---
```{julia}
#| echo: false
@doc FFTParameters
```
:::

### Response spectrum

The response spectrum is basically the Fourier transform of the response of a system to a given input.

#### API

::: {.api}
**spectrum**

---
```{julia}
#| echo: false
@doc spectrum
```
:::

#### Example

```{julia}
#| output: false
# Structural parameters
m = 1.
f0 = 25.
ξ = 0.1

sdof = Sdof(m, f0, ξ)

# Acquisition parameters
sample_rate = 256
block_size = 1024
fft_params = FFTParameters(sample_rate, block_size)
freq = fft_params.freq
t = fft_params.t

# Excitation signal generation
F0 = 10.
chirp = SweptSine(F0, t[1], 0.8t[end], freq[1], freq[end], zero_end = true)
x = excitation(chirp, t)

# Reference signal
prob = SdofForcedTimeProblem(sdof, [0., 0.], t, x)
y = solve(prob).u

# Frequency domain
Fx = Fx = rfft(x)[1:length(freq)]/block_size
Fx[2:end] .*= 2.

# Response spectrum
prob_y = SdofFrequencyProblem(sdof, freq, Fx)
u = solve(prob_y).u

# Spectrum stimation
uest = spectrum(y, block_size, rect, fs = sample_rate)[1]
```

```{julia}
#| echo: false
fig_u = Figure()
ax_u = Axis(fig_u[1, 1], xlabel = "Frequency (Hz)", ylabel = "Amplitude (dB)")
lines!(ax_u, freq, 20log10.(abs.(u)), label = "Reference")
lines!(ax_u, freq, 20log10.(abs.(uest)), linestyle = :dash, label = "Estimated")
axislegend(ax_u, position = :rt, backgroundcolor = (:white, 0.5),)
xlims!(ax_u, 0., 50.)
ylims!(ax_u, -110., -80.)

display(fig_u);
```

### Autopower & Cross Spectral Density functions

Autopower functions are used to estimate the power of a signal in the frequency domain. ``StructuralVibration.jl`` allows to compute the following autopower functions:

- Autopower Spectrum
- Autopower Linear
- Autopower Power Spectral Density (PSD)
- Autopower Energy Spectral Density (ESD)

Cross Spectral Density (CSD) functions are used to estimate the relationship between two signals in the frequency domain. ``StructuralVibration.jl`` allows to compute the following CSD functions using various scaling options:

- Cross Spectral Density (CSD)
- Cross Linear
- Cross Power Spectral Density (CPSD)
- Cross Energy Spectral Density (CESD)


::: {.callout-note}
For a detailed discussion on the differences between these functions, please refer to this excellent blogpost [The Autopower function... Demystified!](https://community.sw.siemens.com/s/article/the-autopower-function-demystified).
:::

#### API

::: {.api}
**welch**

---
```{julia}
#| echo: false
@doc welch
```
:::


::: {.api}
**csd**

---
```{julia}
#| echo: false
@doc csd
```
:::

#### Example

This example is based on the one provided in the `DSP.jl` documentation. It generates a signal composed of two sine waves at 100 Hz and 150 Hz with amplitudes equal to 1 and 2 respectively, and then estimates the power spectral density using the Welch method.

```{julia}
#| output: false
# Acquisition parameters
fs = 1000
bs = 100

fft_params = FFTParameters(fs, bs)
freq = fft_params.freq
t = (1:fs)/fs

# Signal generation
f = [100 150]                      # 100Hz & 150Hz frequencies
A = [1; 2]                         # Amplitudes
x = sin.(2π*f.*t)*A + randn(1000)

# PSD estimation from DSP.jl
psd = DSP.welch_pgram(x, bs; fs = fs, window = hamming)
pxx_ref = DSP.power(psd)

# PSD estimation from StructuralVibration.jl
pxx = welch(x, bs, hamming, fs = fs)[1]
pxx_csd = csd(x, x, bs, hamming, fs = fs)[1]
```

```{julia}
#| echo: false
fig_pxx = Figure()
ax_pxx = Axis(fig_pxx[1, 1], xlabel = "Frequency (Hz)", ylabel = "Amplitude (dB)")
lines!(ax_pxx, freq, 10log10.(pxx_ref)[1:length(pxx)], label = "DSP.jl")
lines!(ax_pxx, freq, 10log10.(pxx), linestyle = :dash, label = "welch - StructuralVibration.jl")
lines!(ax_pxx, freq, 10log10.(abs.(pxx_csd)), linestyle = :dot, label = "csd - StructuralVibration.jl")
axislegend(ax_pxx, position = :rt, backgroundcolor = (:white, 0.5),)
xlims!(ax_pxx, 0., freq[end])

display(fig_pxx);
```

### Frequency Response Function

The frequency response function (FRF) is the relation between an input $x$ and the  resulting output $y$ of a linear and time-invariant system. Independent of the input, it is an intrinsic property of the system describing its dynamic behavior w.r.t. the frequency.

In practice, the FRF is computed from estimators. In `StructuralVibration.jl`, the following estimators are implemented:

- **H1 estimator**: It is the most common estimator used in structural dynamics. It assumes that the noise only affects the output signal. It is defined as:
$$
H_1(\omega) = \frac{S_{yx}(\omega)}{S_{xx}(\omega)},
$$
where $S_{yx}(\omega)$ is the cross-power spectral density between the input and output signals, and $S_{xx}(\omega)$ is the power spectral density of the input signal.

Generally, the H1 estimator estimates the anti-resonances better than the resonances[^4]. Furthermore, as the number of averages increases, the H1 estimator converges to the true FRF.

[^4]: Simcenter Testing Knowledge. "What is a Frequency Response Function (FRF)?". 2020. [link](https://community.sw.siemens.com/s/article/what-is-a-frequency-response-function-frf)

- **H2 estimator**: It is used when the noise is assumed to affect the input signal only. It is defined as:
$$
H_2(\omega) = \frac{S_{yy}(\omega)}{S_{yx}(\omega)},
$$
where $S_{yy}(\omega)$ is the power spectral density of the output signal.

Contrary to the H1 estimator, the H2 estimator estimates the resonances better than the anti-resonances.

- **H3 estimator**: It is used when the noise is assumed to affect both the input and output signals. It is defined as the arithmetic mean of the H1 and H2 estimators:
$$
H_3(\omega) = \frac{H_1(\omega) + H_2(\omega)}{2}.
$$

This estimator offers a good compromise between the H1 and H2 estimators, but it is not as commonly used as the H1 and H2 estimators.

- **Hv estimate**: It is used when the noise is assumed to affect both the input and output signals. It is defined as the geometric mean of the H1 and H2 estimators:
$$
H_v(\omega) = \sqrt{H_1(\omega) H_2(\omega)}.
$$

It generally provides the best overall estimate of the FRF, because the geometric mean is less sensitive to outliers than the arithmetic mean.

These estimators are generally completed by other information such as the coherence function, which an averaged function that how much the output is linearly related to the input. In this sense, it can be an indicator of the quality of the FRF estimate. It can also serve to check the repeatability of individual FRF estimates. It is expressed as:
$$
\gamma^2(\omega) = \frac{S_{yx}^2(\omega)}{S_{xx}(\omega) S_{yy}(\omega)} = \frac{H_1(\omega)}{H_2(\omega)},
$$
where $S_{yx}(\omega)$ is the cross-power spectral density between the input and output signals, and $S_{xx}(\omega)$ and $S_{yy}(\omega)$ are the power spectral densities of the input and output signals respectively.

::: {.callout-note}
In absence of averaging, the coherence is equal to 1 over all the frequency range!
:::

#### API

::: {.api}
**tfestimate**

---
```{julia}
#| echo: false
@doc tfestimate
```
:::

#### Example

```{julia}
#| output: false
# Structural parameters
m = 1.
f0 = 25.
ξ = 0.1

sdof = Sdof(m, f0, ξ)

# Acquisition parameters for one block
sample_rate = 256
block_size = 1024
fft_params = FFTParameters(sample_rate, block_size)

# Reference FRF
freq = fft_params.freq
prob_frf = SdofFRFProblem(sdof, freq)
H = solve(prob_frf).u

# Signal generation - Input signal
nblocks = 5
tb = fft_params.t
dt = fft_params.dt
t = tb[1]:dt:(nblocks*(tb[end] + dt) - dt)

F0 = 10.
chirp = SweptSine(F0, tb[1], 0.8tb[end], freq[1], freq[end], zero_end = true)
x = repeat(excitation(chirp, tb), outer = nblocks)

# Signal generation - Output signal
prob = SdofForcedTimeProblem(sdof, [0., 0.], t, x)
y = solve(prob).u

# FRF estimation
win(x) = tukey(x, 0.25)
H1 = tfestimate(x, y, block_size, win, fs = sample_rate)[1]
```

```{julia}
#| echo: false
fig_h = Figure()
ax_h = Axis(fig_h[1, 1], xlabel = "Frequency (Hz)", ylabel = "Amplitude (dB)")
lines!(ax_h, freq, 20log10.(abs.(H)), label = "Reference")
lines!(ax_h, freq, 20log10.(abs.(H1)), linestyle = :dash, label = "H1 estimator")
axislegend(ax_h, position = :rt, backgroundcolor = (:white, 0.5),)
xlims!(ax_h, 0., 50.)
ylims!(ax_h, -100., -70.)

display(fig_h);
```