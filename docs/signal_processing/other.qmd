---
title: Other processing
format:
  html:
    toc: true
    number-sections: true
engine: julia
execute:
  freeze: auto
  cache: true
---

```{julia}
#| echo: false
#| output: false
using StructuralVibration, ShareAdd, FFTW
@usingany CairoMakie
```

Other signal processing methods are available in `StructuralVibration.jl`.

## Detrending

Detrending is the process of removing trends from a signal. This is useful when you want to analyze the fluctuations around a trend. The `detrend` function can be used to remove linear or polynomial trends from a signal.

### API

::: {.api}
**detrend**

---
```{julia}
#| echo: false
@doc detrend
```
:::

### Example
```{julia}
#| output: false
# Signal 1
x1 = -0.5:0.01:0.5
y1 = @. sin(π*x1) + 0.25
y1_const = detrend(x1, y1, 0)
y1_lin = detrend(x1, y1, 1)

# Signal 2
x2 = 0:0.1:20
y2 = @. 3sin(x2) + x2
y2_const = detrend(x2, y2, 0)
y2_lin = detrend(x2, y2, 1)
```

```{julia}
#| echo: false
fig = Figure()
ax1 = Axis(fig[1, 1], ylabel = "signal", title = "sin(πt) + 0.25")
ax2 = Axis(fig[2, 1], xlabel = "x", ylabel = "signal", title = "3sin(x) + x")
hlines!(ax1, 0, color = :black, linewidth = 0.5)
vlines!(ax1, 0, color = :black, linewidth = 0.5)
lines!(ax1, x1, y1, label = "Original")
lines!(ax1, x1, y1_const, label = "Constant trend")
lines!(ax1, x1, y1_lin, label = "Linear trend")
xlims!(ax1, x1[1], x1[end])

hlines!(ax2, 0, color = :black, linewidth = 0.5)
lines!(ax2, x2, y2, label = "Original")
lines!(ax2, x2, y2_const, label = "Constant trend")
lines!(ax2, x2, y2_lin, label = "Linear trend")
xlims!(ax2, x2[1], x2[end])

Legend(fig[:, 2], ax1)

display(fig);
```

## Gradient

The gradient of a signal is the rate of change of the signal with respect to time. Julia [![](/assets/logo/julia.svg){width=4mm}] has a lot of packages for computing the gradient of a signal. The `gradient` function in `StructuralVibration.jl` is a simple helper function built around the `gradient` function in `Interpolations.jl`.

### API

::: {.api}
**gradient**

---
```{julia}
#| echo: false
@doc gradient
```
:::

### Example
```{julia}
#| output: false
# Signal
x = LinRange(0., 3π, 100)
y = sin.(x)

# True gradient
dy = cos.(x)

# Estimated gradient
dy_approx = gradient(y, x)
```

```{julia}
#| echo: false
fig1 = Figure()
ax1 = Axis(fig1[1, 1], xlabel = "x", ylabel = "signal")
lines!(ax1, x, dy, label = "cos(x)")
lines!(ax1, x, dy_approx, linestyle = :dash, label = "gradient")
xlims!(ax1, x[1], x[end])
axislegend(ax1, position = :rt)

display(fig1);
```

::: {.callout-note}
Being based on interpolation, `gradient` is not robust against noise. For robust gradient estimation, you can compute the gradient of the signal denoised by the `denoising` function by using one of the numerous Julia differentiation packages if the signal is smooth enough (at least class $C^\2$). If the latter condition is not satisfied, you can for instance use [NoiseRobustDifferentiation.jl](https://adrianhill.de/NoiseRobustDifferentiation.jl/stable/), which implements the Total variation regularized numerical differentiation method[^1] .

[^1]: R. Chartrand. "Numerical differentiation of noisy, nonsmooth data". ISRN Applied Mathematics, vol. 2011, 164564, 2011.
:::